<title>Category Management</title>

<style>
    .main-content {
        padding: 40px;
        margin: 0 auto; /* Center the content */
        width: 90%; /* Enlarged width */
        max-width: 1400px; /* Maximum width to maintain readability */
    }
    .header-section {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }
    .search-section {
        margin-bottom: 20px;
    }
    .search-input {
        max-width: 300px;
        border-radius: 5px;
        padding: 8px 12px;
        border: 1px solid #ddd;
    }
    .btn-add {
        background-color: #000;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 5px;
    }
    .table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
    }
    .table th, .table td {
        padding: 15px 25px; /* Increased padding */
        text-align: left;
        border-bottom: 1px solid #ddd;
    }
    .table th {
        background-color: #000;
        color: white;
        font-weight: 500;
    }
    .table tbody tr:hover {
        background-color: #f5f5f5;
    }
    .table-responsive {
        overflow-x: auto;
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        margin-top: 20px;
    }
    .toggle-switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 30px;
    }
    .toggle-switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }
    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
        border-radius: 34px;
    }
    .slider:before {
        position: absolute;
        content: "";
        height: 22px;
        width: 22px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        transition: .4s;
        border-radius: 50%;
    }
    input:checked + .slider {
        background-color: #4CAF50;
    }
    input:checked + .slider:before {
        transform: translateX(30px);
    }
    .btn-offer {
        background-color: #000;
        color: white;
        border: none;
        padding: 6px 12px;
        border-radius: 5px;
    }
    .btn-edit {
        padding: 6px 12px;
        border-radius: 5px;
    }
    .flex-h-screen {
        display: flex;
        min-height: 100vh;
    }
    .flex-1 {
        flex: 1;
        display: flex;
        flex-direction: column;
        overflow-x: hidden;
        padding: 0px 0; /* Add vertical padding */
    }
    /* Modal Styles */
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
    }
    .modal.show {
        display: flex !important;
        align-items: center;
        justify-content: center;
    }
    .modal-dialog {
        background: white;
        border-radius: 8px;
        width: 90%;
        max-width: 500px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }
    .modal-content {
        position: relative;
    }
    .modal-header {
        padding: 1.5rem;
        border-bottom: 1px solid #e5e5e5;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }
    .modal-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #333;
    }
    .btn-close {
        background: none;
        border: none;
        font-size: 1.5rem;
        color: #666;
        cursor: pointer;
        padding: 0.5rem;
    }
    .btn-close:hover {
        color: #333;
    }
    .modal-body {
        padding: 1.5rem;
    }
    .form-label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 500;
        color: #333;
    }
    .form-control {
        width: 100%;
        padding: 0.75rem;
        border: 1px solid #ddd;
        border-radius: 4px;
        margin-bottom: 1rem;
        font-size: 1rem;
    }
    .form-control:focus {
        border-color: #000;
        outline: none;
        box-shadow: 0 0 0 2px rgba(0,0,0,0.1);
    }
    .btn-success {
        background-color: #000;
        color: white;
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 4px;
        font-weight: 500;
        cursor: pointer;
        transition: background-color 0.2s;
    }
    .btn-success:hover {
        background-color: #333;
    }
    .error-message {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: -0.5rem;
        margin-bottom: 1rem;
        display: none;
    }
    .pagination {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }
    .pagination a {
        padding: 8px 12px;
        margin: 0 5px;
        text-decoration: none;
        color: #333;
        background: #f1f1f1;
        border-radius: 5px;
    }
    .pagination a.active {
        background: #007bff;
        color: white;
    }
    .pagination a:hover {
        background: #0056b3;
        color: white;
    }
    .btn-addoredit {
        background-color: #000;
        color: white;
        border: none;
        padding: 6px 12px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        width: 60px;
        text-align: center;
        white-space: nowrap;
        height: 32px;
        line-height: 20px;
        display: inline-block;
    }
    .btn-remove {
        background-color: #000;
        color: white;
        border: none;
        padding: 6px 12px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        width: 60px;
        text-align: center;
        white-space: nowrap;
        height: 32px;
        line-height: 20px;
        display: inline-block;
    }
    .offer-cell {
        padding: 12px 15px !important;
        display: flex;
        align-items: center;
        height: 80px;
    }
    .offer-content {
        display: flex;
        align-items: center;
        gap: 10px;
        height: 100%;
    }
    .offer-text {
        font-weight: 500;
        white-space: nowrap;
        display: inline-block;
    }
</style>

<div class="flex-h-screen">
    <!--side bar section-->
    <%- include('../partials/admin/side bar') %>
    <div class="flex-1">
        <!--header section-->
        <%- include('../partials/admin/header') %>
        <div class="main-content">
            <div class="header-section">
                <h2>CATEGORY</h2>
                <button class="btn-add" onclick="openModal()">
                     Add Category
                </button>
            </div>
            <!--add category Modal -->
            <div class="modal fade" id="addCategoryModal" tabindex="-1" aria-labelledby="addCategoryModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="addCategoryModalLabel">Add New Category</h5>
                            <button type="button" class="btn-close" onclick="closeModal()">×</button>
                        </div>
                        <div class="text-center text-gray-900" id="response-message"></div>
                        <div class="modal-body">
                            <form action="/admin/add-category" method="POST" onsubmit="return handleFormSubmit(event)">
                                <div class="mb-3">
                                    <label for="categoryName" class="form-label">Name</label>
                                    <input type="text" class="form-control" id="addCategoryId" name="categoryName" placeholder="Enter category name">
                                    <div id="error1" class="error-message"></div>
                                </div>
                                <div class="mb-3">
                                    <label for="descriptionId" class="form-label">Description</label>
                                    <input type="text" class="form-control" id="descriptionId" name="description" placeholder="Enter category description">
                                    <div id="error2" class="error-message"></div>
                                </div>
                                <div class="text-right">
                                    <button type="submit" class="btn btn-success">Add Category</button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>

            <!--edit category modal-->
            <div class="modal fade" id="editCategoryModal" tabindex="-1" aria-labelledby="editCategoryModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="editCategoryModalLabel">Edit Category</h5>
                            <button type="button" class="btn-close" onclick="closeEditModal()">×</button>
                        </div>
                     <div class="text-center text-gray-900" id="response-message"></div>
                     <div class="modal-body">
                        <form onsubmit="editFormSubmit(event,'<%= %>')">
                            <div class="mb-3">
                                <label for="categoryName" class="form-label">Name</label>
                                <input type="text" class="form-control" id="editCategoryId" name="categoryName" placeholder="Enter category name" required>
                                <div id="error1" class="error-message"></div>
                            </div>
                            <div class="mb-3">
                                <label for="description" class="form-label">Description</label>
                                <input type="text" class="form-control" id="editDescriptionId" name="Description" placeholder="Enter category description" required>
                                <div id="error2" class="error-message"></div>
                            </div>
                            <div class="text-right">
                                <button type="submit" class="btn btn-success">Update</button>
                            </div>
                        </form><!--form submission-->
                     </div>
                    </div>
                </div>
            </div>
            <!--offer modal-->
            <div class="modal fade" id="offerModal" tabindex="-1" aria-labelledby="offerModalLabel" aria-hidden="true">
                <div class="modal-dialog">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title" id="offerModalLabel">Add/Edit Offer</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body">
                            <form id="offerForm">
                                <input type="hidden" id="categoryId">
                                
                                <div class="mb-3">
                                    <label for="offerType" class="form-label">Offer Type</label>
                                    <select id="offerType" class="form-select">
                                        <option value="percentage">Percentage</option>
                                        <option value="flat">Flat</option>
                                    </select>
                                </div>
            
                                <div class="mb-3">
                                    <label for="offerValue" class="form-label">Offer Value</label>
                                    <input type="number" id="offerValue" class="form-control" placeholder="Enter percentage or amount" required>
                                </div>
            
                                <div class="mb-3">
                                    <label for="startDate" class="form-label">Start Date</label>
                                    <input type="date" id="startDate" class="form-control" required>
                                </div>
            
                                <div class="mb-3">
                                    <label for="endDate" class="form-label">End Date</label>
                                    <input type="date" id="endDate" class="form-control" required>
                                </div>
            
                                <button type="button" class="btn btn-primary w-100" id="saveOfferBtn">Save Offer</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>

            <div class="search-section">
                <input type="text" class="search-input" placeholder="Search category...">
            </div>

            <div class="table-responsive">
                <table class="table">
                    <thead>
                        <tr>
                            <th>SNO</th>
                            <th>Category Name</th>
                            <th>Status</th>
                            <th>List/Unlist</th>
                            <th>Action</th>
                            <th>Offer</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% categories.forEach((category, index) => { %>
                            <tr>
                                <td><%= index + 1 %></td>
                                <td><%= category.name %></td>
                                <td><%= category.isListed ? 'Listed':'Unlisted' %></td>
                                <td>
                                    <label class="toggle-switch">
                                        <input type="checkbox" class="toggle-category" data-category-id="<%= category._id %>" <%= category.isListed ? 'checked' : '' %>>
                                        <span class="slider"></span>
                                    </label>
                                </td>
                                <td>
                                    <button class="btn btn-dark btn-edit" onclick="OpenEditModal('<%= category._id %>','<%= category.name %>','<%= category.description %>','<%= category.categoryOffer %>')">
                                        Edit <i class="fas fa-plus"></i>
                                    </button>
                                </td>
                                <td class="offer-cell">
                                    <div class="offer-content">
                                        <span class="offer-text"><%= category.offer && category.offer.value ? category.offer.value + (category.offer.type === 'percentage' ? '%' : '₹') : 'N/A' %></span>
                                        <button class="btn-addoredit" data-categoryid="<%= category._id %>">
                                            <%= category.offer && category.offer.value ? 'Edit' : 'Add' %>
                                        </button>
                                        <button class="btn-remove" onclick="removeOffer('<%= category._id %>')" id="removeOfferBtn">
                                            <i class="fas fa-trash-alt"></i>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        <% }); %>
                        
                    </tbody>
                </table>
            </div>
        </div>
        <div class="pagination">
            <% if (hasPrevPage) { %>
                <a href="/admin/categories?page=<%= prevPage %>&limit=<%= limit %>">Previous</a>
                <% } %>
                <% for (let i = 1; i <= totalPages; i++) { %>
                    <a href="/admin/categories?page=<%= i %>&limit=<%= limit %>" class="<%= currentPage === i ? 'active' : '' %>"><%= i %></a>
                    <% } %>
            <% if (hasNextPage) { %>
                <a href="/admin/categories?page=<%= nextPage %>&limit=<%= limit %>">Next</a>
                <% } %>
        </div>
    </div>
    </div>

<script>

    //list/unlist
     document.addEventListener('DOMContentLoaded', function () {
        const toggleSwitches = document.querySelectorAll('.toggle-category');

        toggleSwitches.forEach(toggle => {
            toggle.addEventListener('change', async function () {
                const categoryId = this.getAttribute('data-category-id');
                const isListed = this.checked;

                console.log("sending request:",{ categoryId,isListed });
                try {
                    const response = await axios.patch(`/admin/toggle-category/${categoryId}`, { isListed });

                    if (response.status !== 200) {
                        throw new Error('Failed to update category status');
                    }

                    console.log("response recieved",response.data);
                } catch (error) {
                    console.error(error);
                    alert("Error updating category status");
                    this.checked = !isListed; // Revert checkbox state on failure
                }
            });
        });
    });

    //open modal
    function openModal() {
        const modal = document.getElementById('addCategoryModal');
        modal.classList.add('show');
    }

    //close modal
    function closeModal() {
        //clear the form
        document.getElementById('addCategoryId').value = "";
        document.getElementById('descriptionId').value = "";
        //clear error messages
        document.getElementById('response-message').textContent = "";

        const modal = document.getElementById('addCategoryModal');
        modal.classList.remove('show');
        
    }

    //open edit modal
    function OpenEditModal(id,name,description,offer){
        console.log('working');
        console.log(id,name,description);
        const modal = document.getElementById('editCategoryModal');
        document.getElementById('editCategoryId').value = name;
        document.getElementById('editDescriptionId').value = description;
        //document.getElementById('editOfferId').value = offer;
        // console.log(document.getElementById('editCategoryId').value);
        // console.log(document.getElementById('editDescriptionId').value);
        
        //editFormSubmit(id,name,description,offer);
        const form = document.querySelector('#editCategoryModal form');
        form.onsubmit = (event)=> editFormSubmit(event,id);
        modal.classList.add('show');
    }

    //close edit modal
    function closeEditModal(){
        const modal = document.getElementById('editCategoryModal');
        modal.classList.remove('show');
    }

    async function handleFormSubmit(event){
        event.preventDefault();
        if(!validateForm()){
          return;
        }
        const responsemessage = document.getElementById('response-message');
        const name = document.getElementsByName('categoryName')[0].value;
        const description = document.getElementById('descriptionId').value;
        //const offer = document.getElementById('offerId').value;
        try {
        const response = await axios.post('/admin/add-category', {name,description});
        console.log(response);
        if(response.data.success){
            swal.fire({
                 icon: "success",
                 title: "Category Added!",
                 text: response.data.message,
                 showConfirmButton: false,
                 timer: 1500
            }).then(() => {
                window.location.reload();
            });
        }
        else{
            swal.fire({
                icon: "error",
                title: "Error",
                text: response.data.error || "Something went wrong!",
            });
        }
            
        } catch (error) {
           console.log(error);
           swal.fire({
            icon: "error",
            title: "Error",
            text: error.response?.data?.error || "internal server error"
           })  
        }
    }

    async function editFormSubmit(event,id){
        event.preventDefault();

        console.log('editFormsubmit triggered');
        const name = document.getElementById('editCategoryId').value;
        const description = document.getElementById('editDescriptionId').value;
        //const offer = document.getElementById('editOfferId').value;
        if(!validateForm()){
            console.log('error in validation');
            //return;//there is a error in validation
        }
        try {
            console.log('try block');
            const response = await axios.patch(`/admin/edit-category/${id}`, {name,description});
            console.log(response);
            if(response.data.success){
                swal.fire({
                    icon: "success",
                    title: "Category Edited!",
                    text: response.data.message,
                    showConfirmButton: false,
                    timer: 1500
                }).then(()=> {
                    window.location.reload();
                });
            }
            else{
               swal.fire({
                icon: "error",
                title: "Error",
                text: response.data.error || "something went wrong!"
               })
            }
        } catch (error) {
            console.error(error);
            swal.fire({
                icon: "error",
                title: "Error",
                text: error.response?.data?.error || "internal server error"
            })
        }
    }
    
    function validateForm(){
        console.log('validation running');
        clearErrorMessages();
        const name = document.getElementsByName('categoryName')[0].value.trim();
        const description = document.getElementById('descriptionId').value.trim();
        //const offer = document.getElementById('offerId').value.trim();
        console.log(name);
        
        isValid = true;

        if(name === ''){
            displayErrorMessage("error1","Name is required")
            isValid = false;
        }
        else if(!/^[a-zA-Z\s]+$/.test(name)){
            displayErrorMessage("error1","Name can only contain alphabets")
            isValid = false;
        }
        if(description === ''){
            displayErrorMessage("error2","Description is required")
            isValid = false;
        }
        // if(offer === ''){
        //     displayErrorMessage("error3","Offer is required")
        //     isValid = false;
        // }
        return isValid;
    }
    function displayErrorMessage(elementId,message){
        var errorElement = document.getElementById(elementId);
        errorElement.innerText = message;
        errorElement.style.display = "block";
    }
    function clearErrorMessages(){
        const errorElements = document.getElementsByClassName('error-message');
        Array.from(errorElements).forEach(element => {
            element.innerText = "";
            element.style.display = "none";
        })
    }
</script>
<script>
    // function openOfferModal(categoryId){
    //     const modal = document.getElementById('offerModal');
    //     modal.classList.add('show');
    //     document.getElementById("categoryId").value = categoryId;
    //     console.log('category Id in function:',categoryId);
    // }
    document.addEventListener('DOMContentLoaded',function(){
        let selectedCategoryId = null;
        let isEdit = false;

        document.querySelectorAll(".btn-addoredit").forEach(button =>{
            button.addEventListener('click',function() {
                let categoryId = this.getAttribute('data-categoryid');
                //openOfferModal(categoryId);
                console.log('category id:',categoryId);
                selectedCategoryId = categoryId;
                document.getElementById("categoryId").value = categoryId;

                //fetching existing category offer
                axios.get(`/admin/showCategoryOffer/${categoryId}`)
                .then(response => {
                    const offer = response.data.offer || {};
                    document.getElementById("offerType").value = offer.type || "percentage";
                    document.getElementById("offerValue").value = offer.value || 0;
                    document.getElementById("startDate").value = offer.startDate ? offer.startDate.split("T")[0] : "";
                    document.getElementById("endDate").value = offer.endDate ? offer.endDate.split("T")[0] : "";

                    isEdit = offer.value ? true : false;
                    document.getElementById("saveOfferBtn").textContent = isEdit ? "Edit" : "Add";
                })
                .catch((error)=>{
                    console.log('error fetching offer',error);
                })

                const modal = document.getElementById('offerModal');
                modal.classList.add('show');
                //openOfferModal(categoryId);
            });
        });

        document.getElementById("saveOfferBtn").addEventListener('click',async function(){
            const offerData = {
                type: document.getElementById("offerType").value,
                value: document.getElementById("offerValue").value,
                startDate: document.getElementById("startDate").value,
                endDate: document.getElementById("endDate").value
            };
            try {
                let response;
                if(isEdit){
                    response = await axios.patch(`/admin/editCategoryOffer/${selectedCategoryId}`,offerData);
                }
                else{
                    response = await axios.post(`/admin/addCategoryOffer/${selectedCategoryId}`,offerData);
                }
                console.log('response from add offer:',response);
                if(response.data.success){
                    swal.fire({
                        icon: "success",
                        title: isEdit ? "Offer Updated!" : "Offer Added!",
                        text: response.data.message,
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        window.location.reload();
                    })
                }
                else{
                    console.log('an error occured in the add offer request');
                    swal.fire({
                        icon: "error",
                        title: "Error",
                        text: response.data.error || "error occured",
                        showConfirmButton: false,
                        timer: 1500
                    })
                }
            } catch (error) {
                console.log('an error occured in the add offer request',error);
                swal.fire({
                    icon: "error",
                    title: "Error",
                    text: error.response?.data?.error || "something went wrong",
                    showConfirmButton: false,
                    timer: 1500
                })
            }
        })
    })

    async function removeOffer(categoryId){
        console.log('remove offer:',categoryId);
        swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'delete',
            timer: 5000
        }).then((result) => {
            if(result.isConfirmed){
                axios.post(`/admin/removeCategoryOffer/${categoryId}`)
                .then(response =>{
                    if(response.data.success){
                        console.log('offer removed successfully');
                        swal.fire({
                            icon: "success",
                            title: "Offer Removed!",
                            text: response.data.message,
                            showConfirmButton: false,
                            timer: 1500
                        })
                        .then(()=> window.location.reload())
                    }
                    else{
                        swal.fire({
                            icon: "error",
                            title: "Error",
                            text: response.data.error || "error occured",
                            showConfirmButton: false,
                            timer: 1500
                        });
                    }
                })
                .catch(error =>{
                    console.error('error in removing offer',error);
                    swal.fire({
                        icon: "error",
                        title: "Error",
                        text: error.response?.data?.error || "something went wrong",
                        showConfirmButton: false,
                        timer: 1500
                    });
                })
            }
        })
    }
</script>