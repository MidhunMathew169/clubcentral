<style>
 /* Layout Fixes */
 body {
        background-color: #f4f4f4;
        /* display: flex; */
        min-height: 100vh;
        margin: 0;
    }

    .container {
        display: flex;
        width: 100%;
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    aside {
        width: 25%;
        padding-right: 20px;
    }

    main {
        width: 75%;
    }
    .row{
        margin-left: 135px;
    }
    
    /* Form Container */
    .form-container {
        background-color: white;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    
    /* Page Header */
    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        border-bottom: 1px solid #e0e0e0;
        padding-bottom: 15px;
    }
    
    .page-header h2 {
        margin: 0;
        font-size: larger;
    }
    
    /* Dropdown Styling */
    .sort-by-dropdown {
        position: relative;
    }

    .sort-by-dropdown-trigger {
        cursor: pointer;
        padding: 10px;
        background-color: #f8f9fa;
        border: 1px solid #e0e0e0;
        border-radius: 4px;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .sort-by-dropdown-trigger::after {
        content: '▼';
        margin-left: 10px;
        font-size: 0.7em;
    }

    .sort-by-dropdown-menu {
        display: none;
        position: absolute;
        top: 100%;
        left: 0;
        width: 100%;
        background-color: white;
        border: 1px solid #e0e0e0;
        border-radius: 4px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        z-index: 10;
    }

    .sort-by-dropdown-menu.show {
        display: block;
    }

    .sort-by-dropdown-menu ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    .sort-by-dropdown-menu ul li {
        padding: 10px;
        border-bottom: 1px solid #e0e0e0;
    }

    .sort-by-dropdown-menu ul li:last-child {
        border-bottom: none;
    }

    .sort-by-dropdown-menu ul li a {
        text-decoration: none;
        color: #333;
        display: block;
    }

    .sort-by-dropdown-menu ul li a:hover {
        background-color: #f0f0f0;
    }
    
    /* Order Card */
    .order-card {
        background-color: white;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        margin-bottom: 20px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.05);
        overflow: hidden;
    }
    
    .card-head {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background-color: #f8f9fa;
        padding: 15px;
        border-bottom: 1px solid #e0e0e0;
    }
    
    .card-head .title {
        display: flex;
        flex-direction: column;
    }
    
    .card-head .buttons {
        display: flex;
        gap: 10px;
    }
    
    .card-head .buttons a {
        text-decoration: none;
        padding: 5px 10px;
        border-radius: 4px;
        transition: background-color 0.3s ease;
    }
    
    .card-head .buttons a:first-child {
        background-color: #007bff;
        color: white;
    }
    
    .card-head .buttons a:last-child {
        background-color: #dc3545;
        color: white;
    }
    
    .card-body {
        display: flex;
        flex-direction: column;
        padding: 15px;
    }
    
    .card-body > div {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }
    
    .product-thumbnail {
        display: flex;
        align-items: center;
        gap: 15px;
    }
    
    .product-thumbnail img {
        width: 80px;
        height: 80px;
        object-fit: cover;
        border-radius: 8px;
    }
    
    .product-thumbnail div {
        flex-grow: 1;
    }
    
    .product-thumbnail div h5 {
        margin: 0 0 5px 0;
    }
    
    .product-thumbnail div p {
        margin: 0;
        color: #666;
    }
    
    /* Pagination */
    .pagination {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 20px;
    }
    
    .pagination a, 
    .pagination span {
        margin: 0 5px;
        padding: 8px 12px;
        border: 1px solid #ddd;
        text-decoration: none;
        color: #333;
        border-radius: 4px;
        transition: all 0.3s ease;
    }
    
    .pagination a:hover {
        background-color: #f0f0f0;
    }
    
    .pagination .active {
        background-color: #007bff;
        color: white;
        border-color: #007bff;
    }
    
    /* Responsive Design */
    @media (max-width: 768px) {
        main {
            flex-direction: column;
        }
        
        aside, 
        main > .col-lg-9 {
            width: 100%;
        }
        
        .page-header {
            flex-direction: column;
            align-items: flex-start;
        }
        
        .sort-by-dropdown ul {
            margin-top: 10px;
        }
    }
    
    .pagination .active {
        background-color: #007bff;
        color: white;
    }
</style>

<main class="col-lg-9 col-md-8">
    <div class="row">
        <div class="form-container">
            <div class="page-header">
                <h2 class="text-dark">Your Orders</h2>
                <div class="sort-by-dropdown">
                    <div class="sort-by-dropdown-trigger">
                        Filter Orders
                    </div>
                    <div class="sort-by-dropdown-menu">
                        <ul>
                            <li><a href="#" data-filter="pending">Pending</a></li>
                            <li><a href="#" data-filter="confirmed">Confirmed</a></li>
                            <li><a href="#" data-filter="cancelled">Cancelled</a></li>
                            <li><a href="#" data-filter="shipped">Shipped</a></li>
                        </ul>
                    </div>
                </div>
            </div>
                <% if (orders.length > 0) { %>
                    <% orders.forEach(order => { %>
                        <div class="order-card">
                            <div class="card-head">
                            <div class="title">
                                <div class="order-id">Order ID: <%= order.orderId %></div>
                                <div class="date">date: <%= order.orderDate.toISOString().split('T')[0] %></div>
                            </div>
                            <div class="status"><%= order.status %></div>
                            <div class="total">Total: ₹<%= order.totalPrice %></div>
                            <div class="buttons">
                                <a href="/orderDetails/<%= order._id %>">Details</a>
                                <% if(order.status !== 'Delivered' && order.status !== 'Cancelled'){ %>
                                    <button onclick="cancelOrder('<%= order._id %>')">Cancel</button>
                                    <% } %>
                                    <% if(order.status === 'Delivered'){ %>
                                        <button onclick="returnOrder('<%= order._id %>')">Return</button>
                                    <% } %>

                                    <% if(order.paymentStatus === 'Failed') { %>
                                        <button class="btn btn-outline-dark" onclick="retryPayment('<%= order._id %>','<%= order.totalPrice %>')">Retry Payment</button>
                                        <% } %>
                            </div>
                            </div>
                            <div class="card-body">
                                <% order.items.forEach(item => { %>
                                    <div class="product-thumbnail">
                                    <img src="/uploads/re-images/<%= item.product.productImage[0] %>" alt="<%= item.product.productName %>" style="width: 80px; height: 80px; object-fit: cover;">
                                    <div>
                                        <h5><%= item.product.productName %></h5>
                                        <p>Size: <%= item.size %></p>
                                        <p>Qty: <%= item.quantity %></p>
                                    </div>
                                    </div>
                                    <div>
                                        <p>Price per item</p>
                                        <p>₹<%= item.product.salePrice %></p>
                                    </div>
                                <% }) %>
                        </div>
                        </div>
                    <% }) %>
                <% } else { %>
                    <p>No orders placed yet.</p>
                <% } %>
        </div>
    </div>
</main>
<div class="pagination">
    <% if(currentPage > 1){ %>
    <a href="?page=<%= currentPage - 1 %>" class="prev">&laquo; Previous</a>
    <% } %>
    <% for(let i=1; i<=totalPages; i++){ %>
    <a href="?page=<%= i %>" class="<%= currentPage === i ? 'active' : '' %>"><%= i %></a>
    <% } %>
    <% if(currentPage < totalPages){ %>
    <a href="?page=<%= currentPage + 1 %>" class="next">Next &raquo;</a>
    <% } %>
</div>

<%- include("../partials/user/footer") %>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
    function cancelOrder(orderId) {
        console.log('cancelOrder',orderId);
        swal.fire({
            title: 'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'cancel order',
            timer: 5000
        }).then((result) => {
            if(result.isConfirmed){
                console.log('remove',orderId);
                axios.post('/cancelOrder',{orderId})
                .then(response =>{
                    if(response.data.success){
                        console.log('order data is deleted successfully');
                        swal.fire({
                            title:'Cancelled!',
                            text:response.data.message,
                            icon:'success',
                            showConfirmButton:false,
                            timer:1500
                        })
                        .then(()=> window.location.reload())
                    }
                    else{
                        swal.fire('Error',response.data.message,'error')
                    }
                })
                .catch(error =>{
                    console.log('error in cancelling order',error);
                    swal.fire('Error','Something went wrong','error');
                })
            }
        })
    }

    async function retryPayment(orderId,amount){
        console.log('amount for this order:',amount);
        console.log('retry payment');
        try {
            const response = await axios.post('/retryPayment',{orderId,amount})
            console.log('retry payment response:',response.data);
            if(response.data.success){
                const options = {
                    key : response.data.key,
                    amount : response.data.amount,
                    currency : 'INR',
                    name : 'Club Central',
                    description : 'test transaction',
                    order_id : response.data.order.id,
                    handler : async function(response){
                        try {
                            const verifyResponse = await axios.post('/verifyPayment',{
                                razorpay_order_id : response.razorpay_order_id,
                                razorpay_payment_id : response.razorpay_payment_id,
                                razorpay_signature : response.razorpay_signature,
                                orderId : orderId
                            })
                            const verificationResult = verifyResponse.data;
                            console.log('verificationResult:',verificationResult);
                            if(!verificationResult){
                                swal.fire({
                                    icon:'error',
                                    title:'payment failed',
                                    text:'payment verification failed'
                                })
                            }
                            else{
                                swal.fire({
                                    icon:'success',
                                    title:'Payment Successful',
                                    text:'Your order has been placed successfully',
                                    timer: 1500
                                }).then(()=>{
                                    window.location.reload();
                                })
                            }
                        } catch (error) {
                            console.log('error verifying payment:',error);
                            swal.fire({
                                icon:'error',
                                title:'payment verification failed',
                                text:'payment verification failed.please try again',
                                timer:1500
                            }).then(()=> window.location.reload())
                        }
                    },
                    modal:{
                        ondismiss: async function(){
                            try {
                                await axios.post('/update-order-status',{
                                    orderId : orderId,
                                    paymentStatus : 'Failed',
                                    status : 'Pending'
                                });
                                swal.fire({
                                    icon:'error',
                                    title:'Payment Failed',
                                    text:'payment verification failed.you can try later',
                                    timer:1500
                                }).then(() =>{
                                    window.location.reload();
                                })
                            } catch (error) {
                                console.error('error in updating order status:',error);
                            }
                        }
                    },
                    prefill : {
                        name : 'Customer',
                        email : 'customer@gmail.com',
                        contact : '9876543210'
                    }
                };
                const rzp = new Razorpay(options);
                rzp.open();
            }
            else{
                swal.fire({
                    icon:'error',
                    title:'Oops...',
                    text:'Failed to process payment'
                })
            }
        } catch (error) {
            console.log('Error retrying payment:',error);
            swal.fire({
                icon:error,
                title:'Error',
                text:error.message || 'Failed to retry payment'
            })
        }

    }

    function returnOrder(orderId){
        console.log('return order',orderId);
        
        swal.fire({
            title:'Are you sure?',
            text: "You won't be able to revert this!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Return order',
            timer: 5000
        }).then((result) =>{
            if(result.isConfirmed){
                console.log('return',orderId);
                axios.post('/returnOrder',{orderId})
                .then(response =>{
                    console.log('return order response:',response.data);
                    if(response.data.success){
                        console.log('order returned successfully');
                        swal.fire({
                            icon:'success',
                            title:'Order return successfully',
                            text:response.data.message,
                            showConfirmButton:false,
                            timer:1500
                        })
                        .then(()=> window.location.reload())
                    }
                    else{
                        swal.fire({
                            icon:'error',
                            title:'Error',
                            text:response.data.message,
                            showConfirmButton:false,
                            timer:1500
                        })
                    }
                })
                .catch(error =>{
                    console.log('error in return order',error);
                    swal.fire('Error','Something went wrong','error');
                })
            }
        })
    }
</script>